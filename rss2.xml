<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>三冬四夏</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>冲冲冲</description>
    <pubDate>Sun, 23 Apr 2023 08:15:50 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>原型继承的几种方式</title>
      <link>http://example.com/2023/04/22/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <guid>http://example.com/2023/04/22/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <pubDate>Sat, 22 Apr 2023 11:55:38 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;原型继承的几种方式&quot;&gt;&lt;a href=&quot;#原型继承的几种方式&quot; class=&quot;headerlink&quot; title=&quot;原型继承的几种方式&quot;&gt;&lt;/a&gt;原型继承的几种方式&lt;/h1&gt;&lt;h2 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="原型继承的几种方式"><a href="#原型继承的几种方式" class="headerlink" title="原型继承的几种方式"></a>原型继承的几种方式</h1><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h2><p>💡 <strong>方式：</strong>将构造函数的实例赋值给原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">superf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;xuxiaotong&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="string">&quot;21&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">subf.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> superf();<span class="comment">//subf继承了superf，通过原型，形成链条</span></span><br><span class="line"><span class="comment">// 子类实例</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title function_">subf</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">__proto__</span>.<span class="property">__proto__</span> === superf.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>保留了 <code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法判断继承关系的能力</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(superf.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(test))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test <span class="keyword">instanceof</span> superf) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>❌ <strong>存在问题：</strong></p><ol><li><p><strong>引用共享：</strong>原型中包含的所有引用值会在所有实例间共享</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="property">color</span>.<span class="title function_">push</span>(<span class="string">&quot;balck&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="title function_">subf</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test1.<span class="property">color</span>) <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;balck&#x27; ] </span></span><br></pre></td></tr></table></figure></li><li><p><strong>超类无法传参：</strong>子类在实例化时不能给父类的构造函数传参，无法在不影响所有对象实例的情况下把参数传进父类的构造函数中</p></li></ol><h2 id="2-盗用构造函数"><a href="#2-盗用构造函数" class="headerlink" title="2. 盗用构造函数"></a>2. 盗用构造函数</h2><p>💡 <strong>方式：</strong>在子类构造函数中调用父类的构造函数，使用 <code>apply()</code>、<code>call()</code> 方法以新创建的对象为上下文执行构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">superf</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayColor</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类原型上的方法</span></span><br><span class="line">superf.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subf</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    superf.<span class="title function_">call</span>(<span class="variable language_">this</span>, name) <span class="comment">// 盗用构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>✅ <strong>优点：</strong></p><ol><li><p><strong>在子类实例化时可以向父类构造函数传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title function_">subf</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">age</span>)  <span class="comment">// 23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">name</span>)  <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure></li><li><p><strong>没有引用共享的问题：</strong> <code>superf.call(this, name)</code> 为子类的实例创建的新对象的上下文执行父类的初始化代码，每个实例都有自己的 color 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="property">color</span>.<span class="title function_">push</span>(<span class="string">&quot;balck&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="title function_">subf</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test1.<span class="property">color</span>) <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;] </span></span><br></pre></td></tr></table></figure></li></ol><p>❌ <strong>存在问题：</strong></p><ol><li>必须在构造函数中定义方法，通过父类原型定义的方法无法被子类访问到，无法复用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="title function_">sayColor</span>()   <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;balck&#x27; ]</span></span><br><span class="line">test1.<span class="title function_">sayColor</span>()  <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;] </span></span><br><span class="line"><span class="comment">// console.log(test.sayName())  // 子类实例对象调用父类原型上的方法报错</span></span><br></pre></td></tr></table></figure><h2 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h2><p>💡 <strong>方式：</strong></p><ol><li>在子类构造函数中调用父类的构造函数</li><li>把父类的实例对象赋值给子类的原型对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">superf</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>= name</span><br><span class="line">&#125;</span><br><span class="line">superf.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 盗用构造函数继承父类构造函数上的属性和方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subf</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">    superf.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用原型链继承父类原型上的属性和方法</span></span><br><span class="line">subf.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> superf()</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title function_">subf</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="title function_">getName</span>()) <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure><p>弥补了原型链继承和盗用构造函数的不足</p><p><strong>保留了 <code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法判断继承关系的能力</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(superf.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(test))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test <span class="keyword">instanceof</span> superf) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>❌ <strong>存在问题：</strong>调用了两次父类构造函数，存在效率问题</p><h2 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h2><p>💡 <strong>方式：</strong></p><ol><li>创建一个临时构造函数</li><li>将传入的对象赋值给这个构造函数的原型</li><li>返回临时构造函数的一个实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">obj</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&quot;sing&quot;</span>, <span class="string">&quot;dance&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="title function_">obj</span>(person)</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&quot;Ami&quot;</span></span><br><span class="line">person1.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&quot;swim&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="title function_">obj</span>(person)</span><br><span class="line">person2.<span class="property">name</span> = <span class="string">&quot;John&quot;</span></span><br><span class="line">person2.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&quot;read&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)  <span class="comment">// Tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>) <span class="comment">// Ami</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>) <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">hobby</span>) <span class="comment">// [ &#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;swim&#x27;, &#x27;read&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">hobby</span>)<span class="comment">// [ &#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;swim&#x27;, &#x27;read&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">hobby</span>)<span class="comment">// [ &#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;swim&#x27;, &#x27;read&#x27; ]</span></span><br></pre></td></tr></table></figure><p><strong>es5 通过 增加 <code>Object.create(obj[, &#123;新增的属性&#125;])</code> 方法将原型式继承的概念规范化了。</strong></p><ol><li><p>当只有一个参数时，<code>Object.create()</code> 跟 <code>obj()</code> 方法的效果相同</p></li><li><p><code>Object.create()</code> 第二个参数新增的属性会遮蔽原型上的同名属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person3 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;<span class="attr">value</span>:<span class="string">&quot;Samu&quot;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person3.<span class="property">name</span>) <span class="comment">// Samu</span></span><br></pre></td></tr></table></figure></li></ol><p>✅ <strong>使用场景：</strong>有一个对象，想在已有对象的基础上创建一个新的对象</p><p>❌ <strong>存在问题：</strong>引用共享问题，属性中包含的引用值始终会在相关对象空间中共享</p><h2 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h2><p>💡 <strong>方式：</strong>创建一个实现继承的函数，以某种方式增强对象，然后返回对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="title class_">Object</span>(original)  <span class="comment">// 1.调用函数创建一个新的对象</span></span><br><span class="line">    clone.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">// 2. 增强对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&quot;sing&quot;</span>, <span class="string">&quot;dance&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="title function_">createAnother</span>(person)</span><br><span class="line">person1.<span class="title function_">sayHi</span>()  <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里调用函数创建一个新的对象不一定要通过 <code>Object(original)</code>，其他返回新对象的函数都可以</p><p>✅ <strong>使用场景：</strong>适合主要关注对象，不在乎类型、构造函数的场景</p><p>❌ <strong>存在问题：</strong></p><ol><li><p>引用共享</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person2 = <span class="title function_">createAnother</span>(person)</span><br><span class="line">person1.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&quot;swim&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">hobby</span>)<span class="comment">// [ &#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;swim&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">hobby</span>)<span class="comment">// [ &#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;swim&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>复用问题</p></li></ol><h2 id="6-寄生式组合继承"><a href="#6-寄生式组合继承" class="headerlink" title="6. 寄生式组合继承"></a>6. 寄生式组合继承</h2><p>💡 <strong>方式：</strong></p><ol><li>盗用构造函数继承属性</li><li>寄生式继承父类原型</li><li>让返回的新对象赋值给子类的原型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);  <span class="comment">//1. 盗用构造函数继承属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>)&#123;</span><br><span class="line">    <span class="comment">// 2. 寄生式继承父类原型</span></span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="title class_">Object</span>(superType.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建父类原型的副本</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = subType; <span class="comment">// 让副本的 constructor 属性指向子类</span></span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 让子类原型指向副本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubType</span>, <span class="title class_">SuperType</span>);<span class="comment">//实现继承</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">23</span>)</span><br><span class="line">test.<span class="title function_">sayName</span>()  <span class="comment">// Tom </span></span><br></pre></td></tr></table></figure><p>✅ <strong>优点：</strong></p><ol><li>解决了组合式继承两次调用构造函数的问题</li><li>保留了 <code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法判断继承关系的能力</li></ol><p>✅ <strong>使用场景：</strong>引用类型继承的最佳模式<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/04/22/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
